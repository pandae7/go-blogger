// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: blog.proto

package blog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BlogService_CreateBlogPost_FullMethodName = "/blog.v1.BlogService/CreateBlogPost"
	BlogService_GetBlogPost_FullMethodName    = "/blog.v1.BlogService/GetBlogPost"
	BlogService_UpdateBlogPost_FullMethodName = "/blog.v1.BlogService/UpdateBlogPost"
	BlogService_DeleteBlogPost_FullMethodName = "/blog.v1.BlogService/DeleteBlogPost"
)

// BlogServiceClient is the client API for BlogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogServiceClient interface {
	// Create a new blog post
	CreateBlogPost(ctx context.Context, in *CreateBlogPostRequest, opts ...grpc.CallOption) (*CreateBlogPostResponse, error)
	// Retrieve a blog post by PostID
	GetBlogPost(ctx context.Context, in *GetBlogPostRequest, opts ...grpc.CallOption) (*GetBlogPostResponse, error)
	// Update an existing blog post
	UpdateBlogPost(ctx context.Context, in *UpdateBlogPostRequest, opts ...grpc.CallOption) (*UpdateBlogPostResponse, error)
	// Delete a blog post by PostID
	DeleteBlogPost(ctx context.Context, in *DeleteBlogPostRequest, opts ...grpc.CallOption) (*DeleteBlogPostResponse, error)
}

type blogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogServiceClient(cc grpc.ClientConnInterface) BlogServiceClient {
	return &blogServiceClient{cc}
}

func (c *blogServiceClient) CreateBlogPost(ctx context.Context, in *CreateBlogPostRequest, opts ...grpc.CallOption) (*CreateBlogPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBlogPostResponse)
	err := c.cc.Invoke(ctx, BlogService_CreateBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) GetBlogPost(ctx context.Context, in *GetBlogPostRequest, opts ...grpc.CallOption) (*GetBlogPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlogPostResponse)
	err := c.cc.Invoke(ctx, BlogService_GetBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) UpdateBlogPost(ctx context.Context, in *UpdateBlogPostRequest, opts ...grpc.CallOption) (*UpdateBlogPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBlogPostResponse)
	err := c.cc.Invoke(ctx, BlogService_UpdateBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogServiceClient) DeleteBlogPost(ctx context.Context, in *DeleteBlogPostRequest, opts ...grpc.CallOption) (*DeleteBlogPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBlogPostResponse)
	err := c.cc.Invoke(ctx, BlogService_DeleteBlogPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogServiceServer is the server API for BlogService service.
// All implementations must embed UnimplementedBlogServiceServer
// for forward compatibility.
type BlogServiceServer interface {
	// Create a new blog post
	CreateBlogPost(context.Context, *CreateBlogPostRequest) (*CreateBlogPostResponse, error)
	// Retrieve a blog post by PostID
	GetBlogPost(context.Context, *GetBlogPostRequest) (*GetBlogPostResponse, error)
	// Update an existing blog post
	UpdateBlogPost(context.Context, *UpdateBlogPostRequest) (*UpdateBlogPostResponse, error)
	// Delete a blog post by PostID
	DeleteBlogPost(context.Context, *DeleteBlogPostRequest) (*DeleteBlogPostResponse, error)
	mustEmbedUnimplementedBlogServiceServer()
}

// UnimplementedBlogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBlogServiceServer struct{}

func (UnimplementedBlogServiceServer) CreateBlogPost(context.Context, *CreateBlogPostRequest) (*CreateBlogPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBlogPost not implemented")
}
func (UnimplementedBlogServiceServer) GetBlogPost(context.Context, *GetBlogPostRequest) (*GetBlogPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlogPost not implemented")
}
func (UnimplementedBlogServiceServer) UpdateBlogPost(context.Context, *UpdateBlogPostRequest) (*UpdateBlogPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlogPost not implemented")
}
func (UnimplementedBlogServiceServer) DeleteBlogPost(context.Context, *DeleteBlogPostRequest) (*DeleteBlogPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBlogPost not implemented")
}
func (UnimplementedBlogServiceServer) mustEmbedUnimplementedBlogServiceServer() {}
func (UnimplementedBlogServiceServer) testEmbeddedByValue()                     {}

// UnsafeBlogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogServiceServer will
// result in compilation errors.
type UnsafeBlogServiceServer interface {
	mustEmbedUnimplementedBlogServiceServer()
}

func RegisterBlogServiceServer(s grpc.ServiceRegistrar, srv BlogServiceServer) {
	// If the following call pancis, it indicates UnimplementedBlogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BlogService_ServiceDesc, srv)
}

func _BlogService_CreateBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).CreateBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_CreateBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).CreateBlogPost(ctx, req.(*CreateBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_GetBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).GetBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_GetBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).GetBlogPost(ctx, req.(*GetBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_UpdateBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).UpdateBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_UpdateBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).UpdateBlogPost(ctx, req.(*UpdateBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlogService_DeleteBlogPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBlogPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogServiceServer).DeleteBlogPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlogService_DeleteBlogPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogServiceServer).DeleteBlogPost(ctx, req.(*DeleteBlogPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlogService_ServiceDesc is the grpc.ServiceDesc for BlogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blog.v1.BlogService",
	HandlerType: (*BlogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBlogPost",
			Handler:    _BlogService_CreateBlogPost_Handler,
		},
		{
			MethodName: "GetBlogPost",
			Handler:    _BlogService_GetBlogPost_Handler,
		},
		{
			MethodName: "UpdateBlogPost",
			Handler:    _BlogService_UpdateBlogPost_Handler,
		},
		{
			MethodName: "DeleteBlogPost",
			Handler:    _BlogService_DeleteBlogPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blog.proto",
}

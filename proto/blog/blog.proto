syntax = "proto3";

package blog.v1;

option go_package = "github.com/pandae7/go-blogger/proto/blog";

import "google/protobuf/timestamp.proto";


// Each post should have the following attributes:
// PostID (unique identifier)
// Title
// Content
// Author
// Publication Date
// Tags (multiple tags per post)

message BlogPost {
    string post_id = 1; // Unique identifier for the post
    string title = 2; // Title of the blog post
    string content = 3; // Content of the blog post
    string author = 4; // Author of the blog post
    google.protobuf.Timestamp publication_date = 5; // Publication date of the blog post
    google.protobuf.Timestamp updated_date = 6; // Creation date of the blog post
    repeated string tags = 7; // Tags associated with the blog post
}

// Request message for creating a new blog post
// Input: Post details (Title, Content, Author, Publication Date, Tags)
// Publication Date is optional and defaults to the current time if not provided
message CreateBlogPostRequest {
    string title = 1; // Title of the blog post
    string content = 2; // Content of the blog post
    string author = 3; // Author of the blog post
    optional google.protobuf.Timestamp publication_date = 4; // Publication date of the blog post (optional)
    repeated string tags = 5; // Tags associated with the blog post
}

// Response message for creating a new blog post
// Output: The Post (PostID, Title, Content, Author, Publication Date, Tags)
message CreateBlogPostResponse {
    BlogPost post = 1; // The created blog post
    bool success = 2;
    string message = 3;
}

// Request message for retrieving a blog post
// Input: PostID of the post to retrieve
message GetBlogPostRequest {
    string post_id = 1; // Unique identifier for the post to retrieve
}

// Response message for retrieving a blog post
// Output: The Post (PostID, Title, Content, Author, Publication Date, Tags)
message GetBlogPostResponse {
    BlogPost post = 1; // The retrieved blog post
    bool success = 2;
    string message = 3;
}

// Request message for updating a blog post
// Input: PostID of the post to update and new details (Title, Content, Author, Tags)
message UpdateBlogPostRequest {
    string post_id = 1; // Unique identifier for the post to update
    string title = 2; // New title of the blog post
    string content = 3; // New content of the blog post
    repeated string tags = 5; // New tags associated with the blog post
    // updated_date is automatically set to the current time when the post is updated
}

// Response message for updating a blog post
// Output: Post details (PostID, Title, Content, Author, Publication Date, Tags)
message UpdateBlogPostResponse {
    BlogPost post = 1; // The updated blog post
    bool success = 2;
    string message = 3;
}

// Request message for deleting a blog post
// Input: PostID of the post to delete
message DeleteBlogPostRequest {
    string post_id = 1; // Unique identifier for the post to delete
}

// Response message for deleting a blog post
// Output: Success/Failure message
message DeletePostResponse {
  bool success = 1;
  string message = 2;
}

service BlogService {
    // Create a new blog post
    rpc CreateBlogPost(CreateBlogPostRequest) returns (CreateBlogPostResponse);

    // Retrieve a blog post by PostID
    rpc GetBlogPost(GetBlogPostRequest) returns (GetBlogPostResponse);

    // Update an existing blog post
    rpc UpdateBlogPost(UpdateBlogPostRequest) returns (UpdateBlogPostResponse);

    // Delete a blog post by PostID
    rpc DeleteBlogPost(DeleteBlogPostRequest) returns (DeletePostResponse);
}